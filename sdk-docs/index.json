[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Client.js",
    "content": "import superagent from 'superagent';\nimport saNoCache from 'superagent-no-cache';\nimport EventEmitter from 'events';\n\nimport utils from './utils/utils.js';\nimport Service from './Service';\nimport Job from './Job';\nimport GSF_API from './utils/GSF_API';\nimport EVENTS from './utils/EVENTS';\n\nconst nocache = utils.isIE() ? saNoCache.withQueryStrings : saNoCache;\n\n/**\n * The Client class is used to connect to the server and retrieve information\n *  about available services and jobs.\n * @example\n * // Obtain Client object from GSF.\n * const Client = GSF.client({address:'MyServer',port:9191});\n */\nclass Client extends EventEmitter {\n  /**\n   * The ClientOptions object contains information about the server.\n   * @typedef {Object} ClientOptions\n   * @property {string} ClientOptions.address - The server address/name.\n   * @property {string} [ClientOptions.port=null] - The server port.\n   * @property {Object} [ClientOptions.headers={}] - The headers to be used in requests.\n   * @property {string} [ClientOptions.APIRoot=''] - The API root endpoint.\n   * @property {string} [ClientOptions.protocol='http'] - The protocol to use.\n   */\n\n  /**\n   * @param {ClientOptions} clientOptions - The object containing server information.\n   * @emits {JobCompleted}\n   * @emits {JobSucceeded}\n   * @emits {JobFailed}\n   * @emits {JobProgress}\n   * @emits {JobStarted}\n   * @emits {JobAccepted}\n   */\n  constructor(clientOptions) {\n    // Init EventEmitter superclass.\n    super();\n\n    /**\n     * The server address/name.\n     * @type {string}\n     */\n    this.address = clientOptions.address;\n\n    /**\n     * The server port.\n     * @type {number}\n     */\n    this.port = clientOptions.port || null;\n\n    /**\n     * The headers to use in requests\n     * @type {Object}\n     */\n    this.headers = clientOptions.headers || {};\n\n    /**\n     * The API root endpoint.  If none, set to empty string.\n     * @type {string}\n     */\n    this.APIRoot = clientOptions.APIRoot || GSF_API.ROOT_PATH;\n\n    /**\n     * The protocol to use.\n     * @type {string}\n     */\n    this.protocol = clientOptions.protocol || 'http';\n\n    /**\n     * The server url.\n     * @type {string}\n     */\n    this.URL = this.protocol + '://' +\n      this.address + (this.port ? ':' + this.port : '');\n\n    /**\n     * The API root url.\n     * @type {string}\n     */\n    this.rootURL = (this.APIRoot === '') ? this.URL : [this.URL, this.APIRoot].join('/');\n\n    // Allow infinite listeners.\n    this.setMaxListeners(0);\n\n    // Use global EventSource for browsers and the node package for node.\n    let Eventsource;\n    if (NODE) { // Webpack defined global\n      Eventsource = require('eventsource');\n    } else {\n      Eventsource = EventSource;\n    }\n\n    // Attach to server sent events and re broadcast.\n    // Include headers as query strings.\n    let queryString;\n    if (this.headers) {\n      queryString = Object.keys(this.headers).map((key) => {\n        return encodeURIComponent(key) + '=' +\n          encodeURIComponent(this.headers[key]);\n      }).join('&');\n    }\n\n    let url = [this.URL, this.APIRoot,\n      GSF_API.EVENTS_PATH].filter((v) => (v !== '')).join('/');\n    url = (queryString) ? (url + '?' + queryString) : (url);\n\n    this._events = new Eventsource(url);\n\n    // Emit succeeded and failed events.\n    this.on(EVENTS.completed, (data) => {\n      this.emit(data.success ? EVENTS.succeeded : EVENTS.failed, data);\n    });\n\n    // Function to handle server sent events.\n    function handler(type, event) {\n      try {\n        const data = JSON.parse(event.data);\n        this.emit(type, data);\n      } catch (err) {}\n    };\n\n    // Listen for events from our server.  Pass\n    // them into the handler with job event type.\n    Object.keys(EVENTS).forEach((key) => {\n      // Server doesn't emit succeeded or failed events.\n      if ((EVENTS[key] === EVENTS.succeeded) ||\n       (EVENTS[key] === EVENTS.failed)) return;\n\n      // Add a listener for each of the sse's.\n      this._events.addEventListener(EVENTS[key],\n        handler.bind(this, EVENTS[key]));\n    });\n  }\n\n  /**\n   * Retrieves an array of available services from the server.\n   * @return {Promise<Service[], error>} Returns a Promise to an array of available Service objects.\n   */\n  services() {\n    return new Promise((resolve, reject) => {\n      // Service url.\n      const url = [this.rootURL, GSF_API.SERVICES_PATH].join('/');\n\n      // Get service list.\n      superagent\n        .get(url)\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            const services = res.body.services;\n            const serviceList = services\n              .map(service => new Service(this, service.name));\n            resolve(serviceList);\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error requesting services' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n   * Filtering options for listing jobs.\n   * @typedef {Object} JobListOptions\n   * @property {Object} query - Filter jobs by specifying one or more comparison operators per property.\n   *   Comparison operators must be prefixed with '$' and only the following are supported: $eq, $ne,\n   *  $gt, $gte, $lt, $lte.  Queries may contain multiple properties and each property may\n   *  contain multiple comparison operators.\n   * @property {Array} sort - The sort array.  This array contains an array for each sort which\n   *  consists of the property to sort by and the direction. To sort in ascending order use 1 and\n   *  to sort in descending order use -1.  For example, to sort by jobSubmitted date in ascending\n   *  order: [ [ 'jobSubmitted', 1 ] ]\n   * @property {number} offset - The number of jobs to skip; useful for pagination.\n   * @property {number} limit - Limit the number of jobs returned. Set to -1 to\n   *  return all jobs. Note: -1 is not recommended, as it may take a long time\n   *  to retrieve all jobs.\n   * @property {string} totals - Types of total job counts to include in the response.\n   *  Must be one of: 'all', 'none', or 'default'.  The default is 'default'.\n   *   Set to 'none' to exclude totals.  Set to 'default' to include total count of all filtered jobs.\n   *   Set to 'all' to include total count of all filtered jobs and the total counts of filtered jobs\n   *  in each job status.  Totals will only be visible when used with the jobInfoList() function.\n   */\n\n  /**\n   * Retrieves an array of jobs on the server.\n   * @param {JobListOptions} jobListOptions - Object containing options for\n   *  filtering job list.\n   * @return {Promise<Job[], error>} Returns a Promise to an array of\n   *  jobs that exist on the server.\n   */\n  jobs(jobListOptions) {\n    return this\n      .jobInfoList(jobListOptions)\n      .then((jobInfoList) => (\n        jobInfoList.jobs.map((jobInfo) => (new Job(this, jobInfo.jobId)))\n      ));\n  }\n\n  /**\n   * A list of JobInfo objects with count and total information.\n   * @typedef {Object} JobInfoList\n   * @property {JobInfo[]} jobs - An array of JobInfo objects that match the search criteria.\n   * @property {string} count - The number of filtered jobs in the jobs array.\n   * @property {string} [total] - The total number of jobs.  Enabled by default.\n   *   To disable, set 'totals' to 'none' in the JobListOptions.\n   * @property {string} [accepted] - The total number of accepted jobs.\n   *   This can be enabled by setting 'totals' to 'all' in the JobListOptions.\n   * @property {string} [started] - The total number of started jobs.\n   *   This can be enabled by setting 'totals' to 'all' in the JobListOptions.\n   * @property {string} [succeeded] - The total number of succeeded jobs.\n   *   This can be enabled by setting 'totals' to 'all' in the JobListOptions.\n   * @property {string} [failed] - The total number of failed jobs.\n   *   This can be enabled by setting 'totals' to 'all' in the JobListOptions.\n   */\n\n  /**\n   * Retrieves an array of job info objects.\n   * @param {JobListOptions} jobListOptions - Object containing options for\n   *  filtering job list.\n   * @return {Promise<JobInfoList, error>} Returns a Promise to a JobInfoList object.\n   */\n  jobInfoList(jobListOptions) {\n    return new Promise((resolve, reject) => {\n      // Service url.\n      let url = [this.rootURL, GSF_API.JOB_SEARCH_PATH].join('/');\n\n\n      // Get job info list.\n      superagent\n        .post(url)\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this.headers)\n        .send(jobListOptions || {})\n        .then((res) => {\n          resolve(res.body);\n        })\n        .catch((err) => {\n          const status = ((err && err.status) ? ': ' + err.status : '');\n          const text = ((err && err.response && err.response.text) ? ': ' +\n           err.response.text : '');\n          reject('Error requesting jobs' + status + text);\n        });\n    });\n  }\n\n  /**\n   * Returns the Service object based on service name.\n   * @param {string} serviceName - The name of the service.\n   * @return {Service} The Service object.\n   */\n  service(serviceName) {\n    return new Service(this, serviceName);\n  }\n\n  /**\n   * Retrieves job object based on the job ID.\n   * @param {string} jobId - The id of the job from which to retrieve the job object.\n   * @param {function(info: JobProgressInfo)} [progressCallback] - The callback to handle job progress.\n   * @param {function(info: JobStartedInfo)} [startedCallback] - The callback that is called when the job starts.\n   *  For more reliable job started information, listen to the GSF JobStarted\n   *  events as this callback may not always get called.  In some cases the job\n   *  can start before the callback is registered.\n   * @return {Job} Returns job object.\n   */\n  job(jobId, progressCallback, startedCallback) {\n    return new Job(this, jobId, progressCallback, startedCallback);\n  }\n\n}\n\nexport default Client;\n\n/**\n * Emitted when a job completes.\n * @typedef {Object} JobCompleted\n * @property {string} jobId - The job id.\n * @property {boolean} success - A boolean set to true if the job succeeds,\n *  false if it fails.\n */\n\n/**\n * Emitted when a job succeeds.\n * @typedef {Object} JobSucceeded\n * @property {string} jobId - The job id.\n */\n\n/**\n * Emitted when a job fails.\n * @typedef {Object} JobFailed\n * @property {string} jobId - The job id.\n */\n\n/**\n * Emitted when job progress is updated.\n * @typedef {Object} JobProgress\n * @property {string} jobId - The job id.\n * @property {number} progress - The job progress percent.\n * @property {string} [message] - The job progress message, if any.\n */\n\n/**\n * Emitted when a job starts.\n * @typedef {Object} JobStarted\n * @property {string} jobId - The job id.\n */\n\n/**\n * Emitted when a job is accepted.\n * @typedef {Object} JobAccepted\n * @property {string} jobId - The job id.\n */\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/Client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "nocache",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~nocache",
    "access": "public",
    "export": false,
    "importPath": "gsf-js-client-sdk/dist/Client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Client",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~Client",
    "access": "public",
    "export": true,
    "importPath": "gsf-js-client-sdk/dist/Client.js",
    "importStyle": "Client",
    "description": "The Client class is used to connect to the server and retrieve information\n about available services and jobs.",
    "examples": [
      "// Obtain Client object from GSF.\nconst Client = GSF.client({address:'MyServer',port:9191});"
    ],
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "name": "JobCompleted",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~JobCompleted",
    "access": "public",
    "description": "Emitted when a job completes.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "A boolean set to true if the job succeeds,\n false if it fails."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobCompleted"
    }
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "JobSucceeded",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~JobSucceeded",
    "access": "public",
    "description": "Emitted when a job succeeds.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobSucceeded"
    }
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "name": "JobFailed",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~JobFailed",
    "access": "public",
    "description": "Emitted when a job fails.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobFailed"
    }
  },
  {
    "__docId__": 54,
    "kind": "typedef",
    "name": "JobProgress",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~JobProgress",
    "access": "public",
    "description": "Emitted when job progress is updated.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "The job progress percent."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "The job progress message, if any."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobProgress"
    }
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "JobStarted",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~JobStarted",
    "access": "public",
    "description": "Emitted when a job starts.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobStarted"
    }
  },
  {
    "__docId__": 56,
    "kind": "typedef",
    "name": "JobAccepted",
    "memberof": "src/Client.js",
    "static": true,
    "longname": "src/Client.js~JobAccepted",
    "access": "public",
    "description": "Emitted when a job is accepted.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobAccepted"
    }
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "ClientOptions",
    "memberof": "src/Client.js~Client",
    "static": true,
    "longname": "src/Client.js~Client.ClientOptions",
    "access": "public",
    "description": "The ClientOptions object contains information about the server.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ClientOptions.address",
        "description": "The server address/name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "ClientOptions.port",
        "description": "The server port."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "ClientOptions.headers",
        "description": "The headers to be used in requests."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "ClientOptions.APIRoot",
        "description": "The API root endpoint."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'http'",
        "defaultRaw": "'http'",
        "name": "ClientOptions.protocol",
        "description": "The protocol to use."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ClientOptions"
    }
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "ClientOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "clientOptions",
        "description": "The object containing server information."
      }
    ],
    "emits": [
      {
        "types": [
          "JobCompleted"
        ],
        "description": ""
      },
      {
        "types": [
          "JobSucceeded"
        ],
        "description": ""
      },
      {
        "types": [
          "JobFailed"
        ],
        "description": ""
      },
      {
        "types": [
          "JobProgress"
        ],
        "description": ""
      },
      {
        "types": [
          "JobStarted"
        ],
        "description": ""
      },
      {
        "types": [
          "JobAccepted"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "address",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#address",
    "access": "public",
    "description": "The server address/name.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "port",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#port",
    "access": "public",
    "description": "The server port.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "headers",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#headers",
    "access": "public",
    "description": "The headers to use in requests",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "APIRoot",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#APIRoot",
    "access": "public",
    "description": "The API root endpoint.  If none, set to empty string.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "protocol",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#protocol",
    "access": "public",
    "description": "The protocol to use.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "URL",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#URL",
    "access": "public",
    "description": "The server url.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "rootURL",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#rootURL",
    "access": "public",
    "description": "The API root url.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_events",
    "memberof": "src/Client.js~Client",
    "static": false,
    "longname": "src/Client.js~Client#_events",
    "access": "private",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "services",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#services",
    "access": "public",
    "description": "Retrieves an array of available services from the server.",
    "lineNumber": 144,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Service[], error>"
      ],
      "spread": false,
      "description": "Returns a Promise to an array of available Service objects."
    },
    "params": []
  },
  {
    "__docId__": 68,
    "kind": "typedef",
    "name": "JobListOptions",
    "memberof": "src/Client.js~Client",
    "static": true,
    "longname": "src/Client.js~Client.JobListOptions",
    "access": "public",
    "description": "Filtering options for listing jobs.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "Filter jobs by specifying one or more comparison operators per property.\n  Comparison operators must be prefixed with '$' and only the following are supported: $eq, $ne,\n $gt, $gte, $lt, $lte.  Queries may contain multiple properties and each property may\n contain multiple comparison operators."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "sort",
        "description": "The sort array.  This array contains an array for each sort which\n consists of the property to sort by and the direction. To sort in ascending order use 1 and\n to sort in descending order use -1.  For example, to sort by jobSubmitted date in ascending\n order: [ [ 'jobSubmitted', 1 ] ]"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "The number of jobs to skip; useful for pagination."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Limit the number of jobs returned. Set to -1 to\n return all jobs. Note: -1 is not recommended, as it may take a long time\n to retrieve all jobs."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "totals",
        "description": "Types of total job counts to include in the response.\n Must be one of: 'all', 'none', or 'default'.  The default is 'default'.\n  Set to 'none' to exclude totals.  Set to 'default' to include total count of all filtered jobs.\n  Set to 'all' to include total count of all filtered jobs and the total counts of filtered jobs\n in each job status.  Totals will only be visible when used with the jobInfoList() function."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobListOptions"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "jobs",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#jobs",
    "access": "public",
    "description": "Retrieves an array of jobs on the server.",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "JobListOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "jobListOptions",
        "description": "Object containing options for\n filtering job list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Job[], error>"
      ],
      "spread": false,
      "description": "Returns a Promise to an array of\n jobs that exist on the server."
    }
  },
  {
    "__docId__": 70,
    "kind": "typedef",
    "name": "JobInfoList",
    "memberof": "src/Client.js~Client",
    "static": true,
    "longname": "src/Client.js~Client.JobInfoList",
    "access": "public",
    "description": "A list of JobInfo objects with count and total information.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "JobInfo[]"
        ],
        "spread": false,
        "optional": false,
        "name": "jobs",
        "description": "An array of JobInfo objects that match the search criteria."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "The number of filtered jobs in the jobs array."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "total",
        "description": "The total number of jobs.  Enabled by default.\n  To disable, set 'totals' to 'none' in the JobListOptions."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "accepted",
        "description": "The total number of accepted jobs.\n  This can be enabled by setting 'totals' to 'all' in the JobListOptions."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "started",
        "description": "The total number of started jobs.\n  This can be enabled by setting 'totals' to 'all' in the JobListOptions."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "succeeded",
        "description": "The total number of succeeded jobs.\n  This can be enabled by setting 'totals' to 'all' in the JobListOptions."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "failed",
        "description": "The total number of failed jobs.\n  This can be enabled by setting 'totals' to 'all' in the JobListOptions."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobInfoList"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "jobInfoList",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#jobInfoList",
    "access": "public",
    "description": "Retrieves an array of job info objects.",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "JobListOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "jobListOptions",
        "description": "Object containing options for\n filtering job list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<JobInfoList, error>"
      ],
      "spread": false,
      "description": "Returns a Promise to a JobInfoList object."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "service",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#service",
    "access": "public",
    "description": "Returns the Service object based on service name.",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serviceName",
        "description": "The name of the service."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Service"
      ],
      "spread": false,
      "description": "The Service object."
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "job",
    "memberof": "src/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Client.js~Client#job",
    "access": "public",
    "description": "Retrieves job object based on the job ID.",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The id of the job from which to retrieve the job object."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobProgressInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "progressCallback",
        "description": "The callback to handle job progress."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobStartedInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "startedCallback",
        "description": "The callback that is called when the job starts.\n For more reliable job started information, listen to the GSF JobStarted\n events as this callback may not always get called.  In some cases the job\n can start before the callback is registered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Job"
      ],
      "spread": false,
      "description": "Returns job object."
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/GSF.js",
    "content": "import Client from './Client';\n\n/**\n * The GSF object provides an entry point to the SDK.\n * @example\n * const client = GSF.client({address:'MyServer',port:9191});\n *\n * @typedef {Object} GSF\n * @property {function(clientOptions: ClientOptions): Client} client - The function for creating a new Client object.\n */\n\nexport default {\n  client(clientOptions) {\n    return new Client(clientOptions);\n  }\n};\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/GSF.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "typedef",
    "name": "GSF",
    "memberof": "src/GSF.js",
    "static": true,
    "longname": "src/GSF.js~GSF",
    "access": "public",
    "description": "The GSF object provides an entry point to the SDK.",
    "examples": [
      "const client = GSF.client({address:'MyServer',port:9191});"
    ],
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "function(clientOptions: ClientOptions): Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The function for creating a new Client object."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GSF"
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/Job.js",
    "content": "import superagent from 'superagent';\nimport saNoCache from 'superagent-no-cache';\nimport EventEmitter from 'events';\nimport utils from './utils/utils.js';\nimport GSF_API from './utils/GSF_API';\nimport EVENTS from './utils/EVENTS';\n\nconst nocache = utils.isIE() ? saNoCache.withQueryStrings : saNoCache;\n\n/**\n * The Job class is used for job operations.\n */\nclass Job extends EventEmitter {\n  /**\n   * @param {Client} client - The GSF Client object.\n   * @param {string} jobId - The jobId.\n   * @param {function(info: JobProgressInfo)} [progressCallback] - The callback to handle job progress.\n   * @param {function(info: JobStartedInfo)} [startedCallback] - The callback that is called when the job starts.\n   *  For more reliable job started information, listen to the GSF JobStarted\n   *  events as this callback may not always get called.  In some cases the job\n   *  can start before the callback is registered.\n   * @emits {JobFailed}\n   * @emits {JobSucceeded}\n   * @emits {JobCompleted}\n   * @emits {JobStarted}\n   * @emits {JobAccepted}\n   * @emits {JobProgress}\n   */\n  constructor(client, jobId, progressCallback, startedCallback) {\n    // Init EventEmitter superclass.\n    super();\n\n    /**\n     * The job Id.\n     * @type {number}\n     */\n    this.jobId = jobId;\n\n    // Server object.\n    this._client = client;\n\n    // Job endpoint.\n    this._jobURL = [this._client.rootURL, GSF_API.JOBS_PATH,\n      this.jobId].join('/');\n\n    // Allow infinite listeners.\n    this.setMaxListeners(0);\n\n    // Store promise for wait() function if called.\n    this._waiting = null;\n\n    // Call progress and started callbacks if supplied to constructor.\n    progressCallback && this.on(EVENTS.progress, progressCallback);\n    startedCallback && this.on(EVENTS.started, startedCallback);\n\n    // Function to handle events.\n    this._handler = (eventName, data) => {\n      // Only care about events pertaining to this job.\n      if (data.jobId !== this.jobId) return;\n\n      // Re-emit the rest of the events.\n      this.emit(eventName, data);\n    };\n\n    // Listen for events from our server.  Pass\n    // them into the handler with job event type.\n    Object.keys(EVENTS).forEach((key) => {\n      this._client.on(EVENTS[key], (data) => {\n        this._handler(EVENTS[key], data);\n      });\n    });\n\n  }\n\n  /**\n   * Waits for the job to complete.\n   * @return {Promise<JobResults, error>} Returns a promise that is resolved when a job is\n   *  successful, returning the job results object.\n   *  If a job fails, the promise is rejected with an error message.\n   */\n  wait() {\n    if (!this._waiting) {\n      this._waiting = new Promise((resolve, reject) => {\n\n        // Listen to job events.\n        this.once(EVENTS.succeeded, (data) => {\n          this.info().then((info) => {\n            resolve(info.jobResults);\n          });\n        });\n        this.once(EVENTS.failed, (data) => {\n          this.info().then((info) => {\n            reject(info.jobError);\n          });\n        });\n\n        // Check to make sure it hasn't already completed.\n        this.info().then((info) => {\n          if (info.jobStatus === EVENTS.succeeded) {\n            resolve(info.jobResults);\n          } else if (info.jobStatus === EVENTS.failed) {\n            reject(info.jobError);\n          }\n        }).catch((err) => {\n          reject(err);\n        });\n      });\n    }\n\n    return this._waiting;\n  }\n\n  /**\n   * The JobInfo object contains information about a job.\n   * @typedef {Object} JobInfo\n   * @property {string} serviceName - The name of the service.\n   * @property {string} taskName - The name of the task.\n   * @property {JobOptions} [jobOptions] - Processing directives to submit along with the job.\n   * @property {Object} [inputParameters] - The input parameters.\n   * @property {string} jobId - The job id.\n   * @property {number} [jobProgress] - The percentage of job completion.\n   * @property {string} [jobMessage] - A status message that is sent with progress updates.\n   * @property {string} jobStatus - The status of the job. It can be Accepted,\n   *  Started, Succeeded, or Failed.\n   * @property {JobResults} [jobResults] - The job output results.\n   * @property {string} [jobSubmitted] - Time the job was submitted.\n   * @property {string} [jobStart] - Time the job started processing.\n   * @property {string} [jobEnd] - Time the job finished processing.\n   * @property {string} [jobError] - An error from the job, if there was one.\n   * @property {NodeInfo} [nodeInfo] - Provides information about the node on which the job ran.\n   */\n\n  /**\n   * Provides information about the node on which the job ran.\n   * @typedef {Object} NodeInfo\n   * @property {string} nodeAddress - This is the address of the machine that ran job.\n   * @property {number} nodePort - The port of the server that ran the job.\n   * @property {number} workerID - The ID of the worker that ran the job.\n   */\n\n  /**\n   * The job output results.\n   * @typedef {Object} JobResults\n   * @property {*} <parameterName>.best - Result from the first parameter mapper which\n   * was able to reverse translate the output value.\n   * @property {*} <parameterName>.raw - The raw output value returned by the task.\n   */\n\n  /**\n   * Retrieves the job information.\n   * @return {Promise<JobInfo, error>} Returns a promise to a JobInfo object.\n   */\n  info() {\n    return new Promise((resolve, reject) => {\n      const jobStatusURL = this._jobURL;\n\n      // Get job status.\n      superagent\n        .get(jobStatusURL)\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this._client.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            resolve(res.body);\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error requesting job info' + status + text);\n          }\n        });\n    });\n    \n  }\n\n  /**\n   * Cancels the job.\n   * @param {boolean} force - If true, the job will force cancel.  Please note that\n   *  setting force to true may be unsafe depending on the type of job\n   *  as it may not be able to properly shut down or clean up.\n   * @return {Promise<true, error>} Returns a promise when cancel is submitted.  If request\n   *  is successfully submitted, the promise will be resolved with a value of true.\n   *  If the request fails, the promise will be resolved with an error message.\n   *  Note that this only represents the success of the request made to the server,\n   *  not the cancellation itself.  Use the Job.Info() function (or Job events)\n   *  to retrieve the status of the job and to learn when it is actually cancelled.\n   */\n  cancel(force) {\n    // Job url.\n    const url = this._jobURL;\n    return new Promise((resolve, reject) => {\n      // Cancel force flag.\n      const requestStatus = force ? 'KillRequested' : 'CancelRequested';\n      // Cancel job.\n      superagent\n        .put(url)\n        .set('Content-Type', 'application/json')\n        .send(JSON.stringify({'jobStatus': requestStatus}))\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this._client.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            resolve(true);\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error cancelling job' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n * Deletes the job.\n * @return {Promise<true, error>} Returns a promise when delete is submitted.  If request\n *  is successfully submitted, the promise will be resolved with a value of true.\n *  If the request fails, the promise will be resolved with an error message.\n *  Note that this only represents the success of the request made to the server,\n *  not the deletion itself.  Use the Job.Info() function (or Job events)\n *  to retrieve the status of the job and to learn when it is actually deleted.\n */\n  delete() {\n    // Job url.\n    const url = this._jobURL;\n    return new Promise((resolve, reject) => {\n      // Delete job.\n      superagent\n        .delete(url)\n        .set('Content-Type', 'application/json')\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this._client.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            resolve(true);\n          } else {\n            const status = err && err.status ? ': ' + err.status : '';\n            const text =\n              err && err.response && err.response.text ?\n                ': ' + err.response.text :\n                '';\n            reject('Error deleting job' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n   * Retrieves a list of the workspace files.\n   * @return {Promise<Object[], error>} Returns a promise to an array of fs.stat objects.\n   */\n  workspace() {\n    return new Promise((resolve, reject) => {\n      const jobStatusURL = this._jobURL;\n      // List workspace files.\n      superagent\n        .get(`${jobStatusURL}/workspace`)\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this._client.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            resolve(res.body.workspace);\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error requesting job workspace' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n   * Retrieves a workspace file.\n   * @return {Promise<arraybuffer, error>} Returns a promise to an ArrayBuffer of the file contents.\n   */\n  file(fileName) {\n    return new Promise((resolve, reject) => {\n      const jobStatusURL = this._jobURL;\n      // Get file as arraybuffer.\n      superagent\n        .get(`${jobStatusURL}/workspace/${fileName}`)\n        .parse(superagent.parse['application/octet-stream'])\n        .responseType('arraybuffer')\n        .then((res) => {\n          resolve(res.body);\n        }).catch((err) => {\n          const status = ((err && err.status) ? ': ' + err.status : '');\n          reject('Error requesting file' + status);\n        });\n    });\n  }\n}\n\nexport default Job;\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/Job.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "nocache",
    "memberof": "src/Job.js",
    "static": true,
    "longname": "src/Job.js~nocache",
    "access": "public",
    "export": false,
    "importPath": "gsf-js-client-sdk/dist/Job.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "Job",
    "memberof": "src/Job.js",
    "static": true,
    "longname": "src/Job.js~Job",
    "access": "public",
    "export": true,
    "importPath": "gsf-js-client-sdk/dist/Job.js",
    "importStyle": "Job",
    "description": "The Job class is used for job operations.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Job.js~Job",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Job.js~Job#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The GSF Client object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The jobId."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobProgressInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "progressCallback",
        "description": "The callback to handle job progress."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobStartedInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "startedCallback",
        "description": "The callback that is called when the job starts.\n For more reliable job started information, listen to the GSF JobStarted\n events as this callback may not always get called.  In some cases the job\n can start before the callback is registered."
      }
    ],
    "emits": [
      {
        "types": [
          "JobFailed"
        ],
        "description": ""
      },
      {
        "types": [
          "JobSucceeded"
        ],
        "description": ""
      },
      {
        "types": [
          "JobCompleted"
        ],
        "description": ""
      },
      {
        "types": [
          "JobStarted"
        ],
        "description": ""
      },
      {
        "types": [
          "JobAccepted"
        ],
        "description": ""
      },
      {
        "types": [
          "JobProgress"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "jobId",
    "memberof": "src/Job.js~Job",
    "static": false,
    "longname": "src/Job.js~Job#jobId",
    "access": "public",
    "description": "The job Id.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "_client",
    "memberof": "src/Job.js~Job",
    "static": false,
    "longname": "src/Job.js~Job#_client",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "_jobURL",
    "memberof": "src/Job.js~Job",
    "static": false,
    "longname": "src/Job.js~Job#_jobURL",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "_waiting",
    "memberof": "src/Job.js~Job",
    "static": false,
    "longname": "src/Job.js~Job#_waiting",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "_handler",
    "memberof": "src/Job.js~Job",
    "static": false,
    "longname": "src/Job.js~Job#_handler",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "wait",
    "memberof": "src/Job.js~Job",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Job.js~Job#wait",
    "access": "public",
    "description": "Waits for the job to complete.",
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "Promise<JobResults, error>"
      ],
      "spread": false,
      "description": "Returns a promise that is resolved when a job is\n successful, returning the job results object.\n If a job fails, the promise is rejected with an error message."
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "typedef",
    "name": "JobInfo",
    "memberof": "src/Job.js~Job",
    "static": true,
    "longname": "src/Job.js~Job.JobInfo",
    "access": "public",
    "description": "The JobInfo object contains information about a job.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serviceName",
        "description": "The name of the service."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "taskName",
        "description": "The name of the task."
      },
      {
        "nullable": null,
        "types": [
          "JobOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "jobOptions",
        "description": "Processing directives to submit along with the job."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "inputParameters",
        "description": "The input parameters."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "jobProgress",
        "description": "The percentage of job completion."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "jobMessage",
        "description": "A status message that is sent with progress updates."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobStatus",
        "description": "The status of the job. It can be Accepted,\n Started, Succeeded, or Failed."
      },
      {
        "nullable": null,
        "types": [
          "JobResults"
        ],
        "spread": false,
        "optional": true,
        "name": "jobResults",
        "description": "The job output results."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "jobSubmitted",
        "description": "Time the job was submitted."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "jobStart",
        "description": "Time the job started processing."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "jobEnd",
        "description": "Time the job finished processing."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "jobError",
        "description": "An error from the job, if there was one."
      },
      {
        "nullable": null,
        "types": [
          "NodeInfo"
        ],
        "spread": false,
        "optional": true,
        "name": "nodeInfo",
        "description": "Provides information about the node on which the job ran."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobInfo"
    }
  },
  {
    "__docId__": 88,
    "kind": "typedef",
    "name": "NodeInfo",
    "memberof": "src/Job.js~Job",
    "static": true,
    "longname": "src/Job.js~Job.NodeInfo",
    "access": "public",
    "description": "Provides information about the node on which the job ran.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeAddress",
        "description": "This is the address of the machine that ran job."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nodePort",
        "description": "The port of the server that ran the job."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "workerID",
        "description": "The ID of the worker that ran the job."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "NodeInfo"
    }
  },
  {
    "__docId__": 89,
    "kind": "typedef",
    "name": "JobResults",
    "memberof": "src/Job.js~Job",
    "static": true,
    "longname": "src/Job.js~Job.JobResults",
    "access": "public",
    "description": "The job output results.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "<parameterName>.best",
        "description": "Result from the first parameter mapper which\nwas able to reverse translate the output value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "<parameterName>.raw",
        "description": "The raw output value returned by the task."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobResults"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "info",
    "memberof": "src/Job.js~Job",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Job.js~Job#info",
    "access": "public",
    "description": "Retrieves the job information.",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "Promise<JobInfo, error>"
      ],
      "spread": false,
      "description": "Returns a promise to a JobInfo object."
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "cancel",
    "memberof": "src/Job.js~Job",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Job.js~Job#cancel",
    "access": "public",
    "description": "Cancels the job.",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "force",
        "description": "If true, the job will force cancel.  Please note that\n setting force to true may be unsafe depending on the type of job\n as it may not be able to properly shut down or clean up."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<true, error>"
      ],
      "spread": false,
      "description": "Returns a promise when cancel is submitted.  If request\n is successfully submitted, the promise will be resolved with a value of true.\n If the request fails, the promise will be resolved with an error message.\n Note that this only represents the success of the request made to the server,\n not the cancellation itself.  Use the Job.Info() function (or Job events)\n to retrieve the status of the job and to learn when it is actually cancelled."
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Job.js~Job",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Job.js~Job#delete",
    "access": "public",
    "description": "Deletes the job.",
    "lineNumber": 223,
    "return": {
      "nullable": null,
      "types": [
        "Promise<true, error>"
      ],
      "spread": false,
      "description": "Returns a promise when delete is submitted.  If request\n is successfully submitted, the promise will be resolved with a value of true.\n If the request fails, the promise will be resolved with an error message.\n Note that this only represents the success of the request made to the server,\n not the deletion itself.  Use the Job.Info() function (or Job events)\n to retrieve the status of the job and to learn when it is actually deleted."
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "workspace",
    "memberof": "src/Job.js~Job",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Job.js~Job#workspace",
    "access": "public",
    "description": "Retrieves a list of the workspace files.",
    "lineNumber": 252,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object[], error>"
      ],
      "spread": false,
      "description": "Returns a promise to an array of fs.stat objects."
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "file",
    "memberof": "src/Job.js~Job",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Job.js~Job#file",
    "access": "public",
    "description": "Retrieves a workspace file.",
    "lineNumber": 277,
    "return": {
      "nullable": null,
      "types": [
        "Promise<arraybuffer, error>"
      ],
      "spread": false,
      "description": "Returns a promise to an ArrayBuffer of the file contents."
    },
    "params": [
      {
        "name": "fileName",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/Service.js",
    "content": "import superagent from 'superagent';\nimport saNoCache from 'superagent-no-cache';\n\nimport utils from './utils/utils.js';\nimport Task from './Task';\nimport GSF_API from './utils/GSF_API';\n\nconst nocache = utils.isIE() ? saNoCache.withQueryStrings : saNoCache;\n\n/**\n * The Service class is used to inspect and create tasks for a service.\n */\nclass Service {\n  /**\n   * @param {Client} client - The GSF client object.\n   * @param {string} serviceName - The name of the service.\n   */\n  constructor(client, serviceName) {\n    /**\n     * The service name.\n     * @type {string}\n     */\n    this.name = serviceName;\n\n    // Client object.\n    this._client = client;\n  }\n\n  /**\n   * The ServiceInfo object contains information about a service.\n   * @typedef {Object} ServiceInfo\n   * @property {string} name - The name of the service.\n   * @property {string} description - A description of the service.\n   */\n\n  /**\n   * Retrieves the service information.\n   * @return {Promise<ServiceInfo, error>} Returns a Promise to the\n   *  ServiceInfo object.\n   */\n  info() {\n    return new Promise((resolve, reject) => {\n      // Build service info url.\n      const url = [this._client.rootURL, GSF_API.SERVICES_PATH, this.name].join('/');\n\n      // Get service info so we can pull off the tasks array.\n      superagent\n        .get(url)\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this._client.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            resolve(res.body);\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error requesting service info' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n   * Returns a task object.\n   * @param {string} taskName - The name of the task.\n   * @return {Task} Returns the task object.\n   */\n  task(taskName) {\n    return new Task(this, taskName);\n  }\n\n  /**\n   * Retrieves the array of task info objects available on the service.\n   * @version 1.1.0\n   * @return {Promise<TaskInfo[], error>} Returns a Promise to an array of TaskInfo objects.\n   */\n  taskInfoList() {\n    return new Promise((resolve, reject) => {\n      // Build service info url.\n      const url = [this._client.rootURL, GSF_API.SERVICES_PATH,\n        this.name, GSF_API.TASKS_PATH].join('/');\n\n      // Get service info so we can pull off the tasks array.\n      superagent\n        .get(url)\n        .query({ taskInfo: true })\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this._client.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            resolve(res.body.tasks);\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error requesting task info objects' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n   * Retrieves the array of task objects available on the service.\n   * @return {Promise<Task[], error>} Returns a Promise to an array of Task objects.\n   */\n  tasks() {\n    return this\n      .taskInfoList()\n      .then((taskInfoList) => (\n        taskInfoList.map((taskInfo) => (new Task(this, taskInfo.taskName))))\n      );\n  }\n}\n\nexport default Service;\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/Service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "nocache",
    "memberof": "src/Service.js",
    "static": true,
    "longname": "src/Service.js~nocache",
    "access": "public",
    "export": false,
    "importPath": "gsf-js-client-sdk/dist/Service.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "Service",
    "memberof": "src/Service.js",
    "static": true,
    "longname": "src/Service.js~Service",
    "access": "public",
    "export": true,
    "importPath": "gsf-js-client-sdk/dist/Service.js",
    "importStyle": "Service",
    "description": "The Service class is used to inspect and create tasks for a service.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Service.js~Service",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Service.js~Service#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The GSF client object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serviceName",
        "description": "The name of the service."
      }
    ]
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "name",
    "memberof": "src/Service.js~Service",
    "static": false,
    "longname": "src/Service.js~Service#name",
    "access": "public",
    "description": "The service name.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "_client",
    "memberof": "src/Service.js~Service",
    "static": false,
    "longname": "src/Service.js~Service#_client",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "typedef",
    "name": "ServiceInfo",
    "memberof": "src/Service.js~Service",
    "static": true,
    "longname": "src/Service.js~Service.ServiceInfo",
    "access": "public",
    "description": "The ServiceInfo object contains information about a service.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the service."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A description of the service."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ServiceInfo"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "info",
    "memberof": "src/Service.js~Service",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Service.js~Service#info",
    "access": "public",
    "description": "Retrieves the service information.",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "Promise<ServiceInfo, error>"
      ],
      "spread": false,
      "description": "Returns a Promise to the\n ServiceInfo object."
    },
    "params": []
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "task",
    "memberof": "src/Service.js~Service",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Service.js~Service#task",
    "access": "public",
    "description": "Returns a task object.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "taskName",
        "description": "The name of the task."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": "Returns the task object."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "taskInfoList",
    "memberof": "src/Service.js~Service",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Service.js~Service#taskInfoList",
    "access": "public",
    "description": "Retrieves the array of task info objects available on the service.",
    "lineNumber": 78,
    "version": "1.1.0",
    "return": {
      "nullable": null,
      "types": [
        "Promise<TaskInfo[], error>"
      ],
      "spread": false,
      "description": "Returns a Promise to an array of TaskInfo objects."
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "tasks",
    "memberof": "src/Service.js~Service",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Service.js~Service#tasks",
    "access": "public",
    "description": "Retrieves the array of task objects available on the service.",
    "lineNumber": 107,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Task[], error>"
      ],
      "spread": false,
      "description": "Returns a Promise to an array of Task objects."
    },
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/Task.js",
    "content": "import superagent from 'superagent';\nimport saNoCache from 'superagent-no-cache';\n\nimport utils from './utils/utils.js';\nimport Job from './Job';\nimport GSF_API from './utils/GSF_API';\n\nconst nocache = utils.isIE() ? saNoCache.withQueryStrings : saNoCache;\n\n/**\n * The Task class is used to submit and inspect tasks.\n */\nclass Task {\n  /**\n   * @param {Service} service - The service object.\n   * @param {string} taskName - The name of the task.\n   */\n  constructor(service, taskName) {\n    /**\n     * The task name.\n     * @type {string}\n     */\n    this.name = taskName;\n\n    /**\n     * The parent service.\n     * @type {Service}\n     */\n    this.service = service;\n\n    // Client object.\n    this._client = service._client;\n  }\n\n  /**\n   * Retrieves the task information.\n   * @return {Promise<TaskInfo, error>} Returns a promise to the TaskInfo object.\n   */\n  info() {\n    return new Promise((resolve, reject) => {\n      // Task info url.\n      const taskURL = [this._client.rootURL, GSF_API.SERVICES_PATH,\n        this.service.name, GSF_API.TASKS_PATH, this.name].join('/');\n\n      // Get task info.\n      superagent\n        .get(taskURL)\n        .use(nocache) // Prevents caching of *only* this request\n        .set(this._client.headers)\n        .end((err, res) => {\n          if (res && res.ok) {\n            resolve(res.body);\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error requesting task info' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n   * Submits the job.\n   * @param {SubmitOptions} submitOptions - The job submit options.\n   * @param {function(info: JobProgressInfo)} [progressCallback] - The callback to handle job progress.\n   * @param {function(info: JobStartedInfo)} [startedCallback] - The callback that is called when the job starts.\n   *  For more reliable job started information, listen to the GSF JobStarted\n   *  events as this callback may not always get called.  In some cases the job\n   *  can start before the callback is registered.\n   * @return {Promise<Job, error>} Returns a promise to a Job object.\n   */\n  submit(submitOptions, progressCallback, startedCallback) {\n    return new Promise((resolve, reject) => {\n\n      // Build task submit url.\n      const url = [this._client.rootURL, GSF_API.JOBS_PATH].join('/');\n      const options = JSON.parse(JSON.stringify(submitOptions));\n      options.taskName = this.name;\n      options.serviceName = this.service.name;\n\n      // Submit task as a job.\n      superagent\n        .post(url)\n        .set('Content-Type', 'application/json')\n        .send(JSON.stringify(options))\n        .set(this._client.headers)\n        .use(nocache) // Prevents caching of *only* this request\n        .end((err, res) => {\n          if (res && res.ok) {\n            // Return new job object using ID.\n            resolve(new Job(this._client, res.body.jobId, progressCallback,\n              startedCallback));\n          } else {\n            const status = ((err && err.status) ? ': ' + err.status : '');\n            const text = ((err && err.response && err.response.text) ? ': ' +\n             err.response.text : '');\n            reject('Error submitting job to ' + url + ' ' + status + text);\n          }\n        });\n    });\n  }\n\n  /**\n   * Submits the job and waits for results.  Resolves the promise if the job\n   *  succeeds and rejects the promise if the job fails.\n   * @param {SubmitOptions} submitOptions - The job submit options.\n   * @param {function(info: JobProgressInfo)} [progressCallback] - The callback to handle job progress.\n   * @param {function(info: JobStartedInfo)} [startedCallback] - The callback that is called when the job starts.\n   *    For more reliable job started information, listen to the GSF JobStarted\n   *   events as this callback may not always get called.  In some cases the job\n   *   can start before the callback is registered.\n   * @return {Promise<JobResults, error>} Returns a promise to a Job object.\n   */\n  submitAndWait(submitOptions, progressCallback, startedCallback) {\n    return this.submit(submitOptions, progressCallback, startedCallback)\n      .then(job => job.wait());\n  }\n}\n\nexport default Task;\n\n/**\n * The Submit Options object contains the information needed to run\n * a job.\n * @typedef SubmitOptions\n * @property {Object} inputParameters - The input parameters to the job.  This is\n *  an object where the keys represent the names of the\n *  input parameters and the values are the inputs to the task.\n * @property {JobOptions} [jobOptions] - Processing options to be used when running the job.\n */\n\n/**\n * The Job Options object contains processing options to be used when running the job.\n * @typedef {Object} JobOptions\n * @property {string} [route] - The route on which to run the job if\n * there is one.\n */\n\n/**\n * The TaskInfo object contains information about a task.\n * @typedef {Object} TaskInfo\n * @property {string} taskName - The name of the task.\n * @property {string} serviceName - The name of the service.\n * @property {string} [displayName] - A readable name for the task. This is only used for display\n *   purposes.\n * @property {string} [description] - A description of the task.\n *\n * @property {InputParameter[]} inputParameters - An array containing the input parameter definitions.\n * @property {OutputParameter[]} outputParameters - An array containing the output parameter definitions.\n */\n\n/**\n * The InputParameter object contains information about an input parameter.\n * @typedef {Object} InputParameter\n * @property {string} name - The name of the parameter.\n * @property {string} type - The type for the parameter.\n * @property {boolean} required - A boolean representing whether or not the parameter is required.\n * @property {string} [displayName] - A display name for the parameter.\n * @property {string} [description] - A description of the parameter.\n * @property {string} [default] - A default value for the parameter.\n * @property {string} [choiceList] - A list of values that will be accepted as input for the parameter.\n */\n\n/**\n * The OutputParameter object contains information about an output parameter.\n * @typedef {Object} OutputParameter\n * @property {string} name - The name of the parameter.\n * @property {string} type - The type for the parameter.\n * @property {boolean} required - A boolean representing whether or not the parameter is required.\n * @property {string} [displayName] - A display name for the parameter.\n * @property {string} [description] - A description of the parameter.\n */\n\n/**\n * The JobResults object contains the job results.\n * @typedef {Object} JobResults\n */\n\n/**\n * Information about job progress.\n * @typedef {Object} JobProgressInfo\n * @property {string} jobId - The job id.\n * @property {number} progress - The job progress percent.\n * @property {string} [message] - The job progress message, if any.\n */\n\n/**\n * Called when a job starts processing.\n *  For more reliable job started information, listen to the GSF JobStarted\n * events as this callback may not always get called.\n * In some cases the job can start before the callback is registered.\n * @typedef {Object} JobStartedInfo\n * @property {string} jobId - The job id.\n */\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/Task.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "nocache",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~nocache",
    "access": "public",
    "export": false,
    "importPath": "gsf-js-client-sdk/dist/Task.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "Task",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~Task",
    "access": "public",
    "export": true,
    "importPath": "gsf-js-client-sdk/dist/Task.js",
    "importStyle": "Task",
    "description": "The Task class is used to submit and inspect tasks.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 109,
    "kind": "typedef",
    "name": "SubmitOptions",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~SubmitOptions",
    "access": "public",
    "description": "The Submit Options object contains the information needed to run\na job.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputParameters",
        "description": "The input parameters to the job.  This is\n an object where the keys represent the names of the\n input parameters and the values are the inputs to the task."
      },
      {
        "nullable": null,
        "types": [
          "JobOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "jobOptions",
        "description": "Processing options to be used when running the job."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "SubmitOptions"
    }
  },
  {
    "__docId__": 110,
    "kind": "typedef",
    "name": "JobOptions",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~JobOptions",
    "access": "public",
    "description": "The Job Options object contains processing options to be used when running the job.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "route",
        "description": "The route on which to run the job if\nthere is one."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobOptions"
    }
  },
  {
    "__docId__": 111,
    "kind": "typedef",
    "name": "TaskInfo",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~TaskInfo",
    "access": "public",
    "description": "The TaskInfo object contains information about a task.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "taskName",
        "description": "The name of the task."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serviceName",
        "description": "The name of the service."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "displayName",
        "description": "A readable name for the task. This is only used for display\n  purposes."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "description",
        "description": "A description of the task."
      },
      {
        "nullable": null,
        "types": [
          "InputParameter[]"
        ],
        "spread": false,
        "optional": false,
        "name": "inputParameters",
        "description": "An array containing the input parameter definitions."
      },
      {
        "nullable": null,
        "types": [
          "OutputParameter[]"
        ],
        "spread": false,
        "optional": false,
        "name": "outputParameters",
        "description": "An array containing the output parameter definitions."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TaskInfo"
    }
  },
  {
    "__docId__": 112,
    "kind": "typedef",
    "name": "InputParameter",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~InputParameter",
    "access": "public",
    "description": "The InputParameter object contains information about an input parameter.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type for the parameter."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "required",
        "description": "A boolean representing whether or not the parameter is required."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "displayName",
        "description": "A display name for the parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "description",
        "description": "A description of the parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "default",
        "description": "A default value for the parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "choiceList",
        "description": "A list of values that will be accepted as input for the parameter."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InputParameter"
    }
  },
  {
    "__docId__": 113,
    "kind": "typedef",
    "name": "OutputParameter",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~OutputParameter",
    "access": "public",
    "description": "The OutputParameter object contains information about an output parameter.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type for the parameter."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "required",
        "description": "A boolean representing whether or not the parameter is required."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "displayName",
        "description": "A display name for the parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "description",
        "description": "A description of the parameter."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "OutputParameter"
    }
  },
  {
    "__docId__": 114,
    "kind": "typedef",
    "name": "JobResults",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~JobResults",
    "access": "public",
    "description": "The JobResults object contains the job results.",
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobResults"
    }
  },
  {
    "__docId__": 115,
    "kind": "typedef",
    "name": "JobProgressInfo",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~JobProgressInfo",
    "access": "public",
    "description": "Information about job progress.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "The job progress percent."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "The job progress message, if any."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobProgressInfo"
    }
  },
  {
    "__docId__": 116,
    "kind": "typedef",
    "name": "JobStartedInfo",
    "memberof": "src/Task.js",
    "static": true,
    "longname": "src/Task.js~JobStartedInfo",
    "access": "public",
    "description": "Called when a job starts processing.\n For more reliable job started information, listen to the GSF JobStarted\nevents as this callback may not always get called.\nIn some cases the job can start before the callback is registered.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jobId",
        "description": "The job id."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JobStartedInfo"
    }
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Task.js~Task#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "service",
        "description": "The service object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "taskName",
        "description": "The name of the task."
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "name",
    "memberof": "src/Task.js~Task",
    "static": false,
    "longname": "src/Task.js~Task#name",
    "access": "public",
    "description": "The task name.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "service",
    "memberof": "src/Task.js~Task",
    "static": false,
    "longname": "src/Task.js~Task#service",
    "access": "public",
    "description": "The parent service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Service"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "_client",
    "memberof": "src/Task.js~Task",
    "static": false,
    "longname": "src/Task.js~Task#_client",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "info",
    "memberof": "src/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Task.js~Task#info",
    "access": "public",
    "description": "Retrieves the task information.",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "Promise<TaskInfo, error>"
      ],
      "spread": false,
      "description": "Returns a promise to the TaskInfo object."
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "submit",
    "memberof": "src/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Task.js~Task#submit",
    "access": "public",
    "description": "Submits the job.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "SubmitOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "submitOptions",
        "description": "The job submit options."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobProgressInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "progressCallback",
        "description": "The callback to handle job progress."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobStartedInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "startedCallback",
        "description": "The callback that is called when the job starts.\n For more reliable job started information, listen to the GSF JobStarted\n events as this callback may not always get called.  In some cases the job\n can start before the callback is registered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Job, error>"
      ],
      "spread": false,
      "description": "Returns a promise to a Job object."
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "submitAndWait",
    "memberof": "src/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Task.js~Task#submitAndWait",
    "access": "public",
    "description": "Submits the job and waits for results.  Resolves the promise if the job\n succeeds and rejects the promise if the job fails.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "SubmitOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "submitOptions",
        "description": "The job submit options."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobProgressInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "progressCallback",
        "description": "The callback to handle job progress."
      },
      {
        "nullable": null,
        "types": [
          "function(info: JobStartedInfo)"
        ],
        "spread": false,
        "optional": true,
        "name": "startedCallback",
        "description": "The callback that is called when the job starts.\n   For more reliable job started information, listen to the GSF JobStarted\n  events as this callback may not always get called.  In some cases the job\n  can start before the callback is registered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<JobResults, error>"
      ],
      "spread": false,
      "description": "Returns a promise to a Job object."
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/utils/EVENTS.js",
    "content": "export default {\n  accepted: 'JobAccepted',\n  started: 'JobStarted',\n  completed: 'JobCompleted',\n  succeeded: 'JobSucceeded',\n  progress: 'JobProgress',\n  failed: 'JobFailed'\n};\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/utils/EVENTS.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/utils/GSF_API.js",
    "content": "export default {\n  ROOT_PATH: '',\n  SERVICES_PATH: 'services',\n  TASKS_PATH: 'tasks',\n  JOBS_PATH: 'jobs',\n  JOB_SEARCH_PATH: 'searchJobs',\n  EVENTS_PATH: 'events'\n};\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/utils/GSF_API.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/utils/utils.js",
    "content": "// Detects if the current browser is IE.\nconst isIE = () => {\n  if (!NODE) {\n    // This require call returns the running version of IE or undefined\n    const isIE = require('component-ie');\n    return isIE;\n  }\n  return false;\n};\n\nexport default {\n  isIE\n};\n",
    "static": true,
    "longname": "/home/l3h/Development/gsf-js-client-sdk/src/utils/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "isIE",
    "memberof": "src/utils/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/utils.js~isIE",
    "access": "public",
    "export": false,
    "importPath": "gsf-js-client-sdk/dist/utils/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "\n<h1 class=\"gsf-title\">\nGSF JavaScript Client SDK\n</h1>\n\nThe GSF JavaScript Client SDK provides a client-side JavaScript library for interacting with GSF.\n\n### [» Migration Guide: v3 to v4](./manual/migration-guide-v4.html)\n*Update to v3 of the SDK.*\n\n### [» Migration Guide: v2 to v3](./manual/migration-guide-v3.html)\n*Update to v3 of the SDK.*\n\n### [» Installation Guide](./manual/installation.html)\n*Install the SDK.*\n\n### [» Getting Started](./manual/getting-started.html)\n*Get started using the SDK.*\n\n### [» Examples](./manual/examples.html)\n*Learn more using code examples.*\n\n### [» API Reference](./identifiers.html)\n*Read the full developer documentation.*\n",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/doc/index.md",
    "name": "./doc/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"gsf-js-client-sdk\",\n  \"version\": \"4.2.0\",\n  \"description\": \"GSF JavaScript Client SDK\",\n  \"author\": \"Harris Geospatial Solutions, Inc.\",\n  \"license\": \"MIT\",\n  \"main\": \"dist/GSF.min.js\",\n  \"types\": \"./index.d.ts\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/geospatial-services-framework/gsf-js-client-sdk.git\"\n  },\n  \"scripts\": {\n    \"clean\": \"shx rm -rf dist\",\n    \"build-node\": \"webpack --config=build/webpack-node.config.js\",\n    \"build-web\": \"webpack --config=build/webpack-web.config.js\",\n    \"build\": \"npm run clean && npm run build-node && npm run build-web\",\n    \"watch\": \"./node_modules/.bin/webpack --progress --colors --watch\",\n    \"test\": \"npm run test-chrome-headless\",\n    \"test-chrome\": \"concurrently --kill-others --success first \\\"node ./test/fake-server/server.js\\\" \\\"npm run prod-test-chrome\\\"\",\n    \"test-chrome-headless\": \"concurrently --kill-others --success first \\\"node ./test/fake-server/server.js\\\" \\\"npm run prod-test-chrome-headless\\\"\",\n    \"test-firefox\": \"concurrently --kill-others --success first \\\"node ./test/fake-server/server.js\\\" \\\"npm run prod-test-firefox\\\"\",\n    \"test-node\": \"concurrently --kill-others --success first \\\"node ./test/fake-server/server.js\\\" \\\"npm run prod-test-node\\\"\",\n    \"test-all\": \"concurrently --kill-others --success first \\\"node ./test/fake-server/server.js\\\" \\\"npm run prod-test-all\\\"\",\n    \"prod-test-node\": \"mocha-webpack --webpack-config build/webpack-node.config.js \\\"test/**/*.test.js\\\"\",\n    \"prod-test-chrome\": \"./node_modules/.bin/karma start --browsers Chrome\",\n    \"prod-test-chrome-headless\": \"./node_modules/.bin/karma start --browsers ChromeHeadless\",\n    \"prod-test-firefox\": \"./node_modules/.bin/karma start --browsers Firefox\",\n    \"prod-test-all\": \"./node_modules/.bin/karma start --browsers ChromeHeadless,Chrome,Firefox\",\n    \"help\": \"./node_modules/.bin/esdoc\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.10.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.10.0\",\n    \"@babel/core\": \"^7.10.0\",\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.10.1\",\n    \"@babel/plugin-transform-runtime\": \"^7.10.0\",\n    \"@babel/preset-env\": \"^7.10.0\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"babel-loader\": \"^8.1.0\",\n    \"babel-plugin-add-module-exports\": \"^1.0.2\",\n    \"body-parser\": \"^1.19.0\",\n    \"chai\": \"^4.2.0\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"chai-things\": \"^0.2.0\",\n    \"component-ie\": \"^1.0.0\",\n    \"concurrently\": \"^5.2.0\",\n    \"cors\": \"^2.8.5\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.1.0\",\n    \"eslint-loader\": \"^4.0.2\",\n    \"eventsource\": \"^1.0.7\",\n    \"express\": \"^4.17.1\",\n    \"istanbul\": \"^0.4.5\",\n    \"karma\": \"^5.0.9\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-chrome-launcher\": \"^3.1.0\",\n    \"karma-firefox-launcher\": \"^1.3.0\",\n    \"karma-mocha\": \"^2.0.1\",\n    \"karma-mocha-reporter\": \"^2.2.5\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-webpack\": \"^4.0.2\",\n    \"mocha\": \"^7.2.0\",\n    \"mocha-webpack\": \"^2.0.0-beta.0\",\n    \"shx\": \"^0.3.2\",\n    \"sinon\": \"^9.0.2\",\n    \"sse-channel\": \"^3.1.1\",\n    \"superagent\": \"^5.2.2\",\n    \"superagent-no-cache\": \"github:johntron/superagent-no-cache#efab70e6fa5f5702883c990b69929aaaaa3b7029\",\n    \"terser-webpack-plugin\": \"^3.0.2\",\n    \"webpack\": \"^4.43.0\",\n    \"webpack-cli\": \"^3.3.11\",\n    \"webpack-merge\": \"^4.2.2\"\n  }\n}\n",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/doc/asset",
    "name": "./doc/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/doc/manual/installation.md",
    "name": "./doc/manual/installation.md",
    "content": "## Installation Guide\nThe SDK can be installed using [npm].\n\n    $ npm install gsf-js-client-sdk\n\n[npm]:http://npmjs.com\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/doc/manual/tutorial/migration-guide-v3.md",
    "name": "./doc/manual/tutorial/migration-guide-v3.md",
    "content": "# Migration Guide: Moving from v2 to v3\nThe gsf-javascript-client-sdk has undergone a number of changes for version 3.0.  This version is significant due to the adoption of a new HTTP API for GSF.  This means that if you upgrade your SDK to v3, you will also need to update your server(s) to GSF version 3.0. Ensure that the gsf-request-handler is enabled on the server before using version 3 of the SDK.  There are a number of breaking changes for the SDK user as a result of switching to the new API.\n\nThe purpose of this guide is to help you transition your application's source code from v2 to v3 of the SDK.\n\n- Classes\n    - [Server](#server-class)\n    - [Service](#service-class)\n    - [Task](#task-class)\n    - [Job](#job-class)\n- Types\n    - [ServiceInfo](#serviceinfo)\n    - [TaskInfo](#taskinfo)\n    - [SubmitOptions](#submitoptions)\n    - [JobInfo](#jobinfo)\n    - [JobResults](#jobresults)\n\n### Server Class\n#### GSF.Server is now GSF.Client.\n- The server class has been renamed to 'Client'.\n- The 'ServerArgs' object is now referred to as 'ClientOptions'.\n\n#### Client.APIRoot no longer defaults to 'ese'.\n- The default APIRoot has been removed to align with the new HTTP API.\n\n### Service Class\n#### Service.info() no longer contains task list.\n- See [ServiceInfo](#serviceinfo) below for details.\n\n#### Service.taskInfoList() response changed.\n- See [TaskInfo](#taskinfo) below for details.\n\n### Task Class\n#### Task.info() response changed.\n- See [TaskInfo](#taskinfo) below for details.\n\n#### Task.submit() and Task.submitAndWait() options changed.\n- See [SubmitOptions](#submitoptions) for more details.\n\n### Job Class\n#### Job.info() response changed.\n- See [JobInfo](#jobinfo) below for more details.\n\n#### Job event names changed.  They are now the same as the Client events.\n    - Renamed 'Accepted' to 'JobAccepted'.\n    - Renamed 'Started' to 'JobStarted'.\n    - Renamed 'Progress' to 'JobProgress'.\n    - Renamed 'Completed' to 'JobCompleted'.\n    - Renamed 'Succeeded' to 'JobSucceeded'.\n    - Renamed 'Failed' to 'JobFailed'.\n\n### Job.wait() response changed.\n- See [JobResults](#jobresults) below for more details.\n\n## Types\n\n### TaskInfo\n- Added 'serviceName'.\n- Renamed 'name' to 'taskName'.\n- Renamed '<parameter>.dataType' to '<parameter>.type'.\n- Renamed '<parameter>.defaultValue' to '<parameter>.default'.\n- Replaced 'parameters' with 'inputParameters' and 'outputParameters'.\n- Removed '<parameter>.direction'\n    - New 'inputParameters' and 'outputParameters' arrays indicate direction in their name.\n\n##### Example of TaskInfo in v2\n```json\n{\n    \"name\": \"ISODATAClassification\",\n    \"displayName\": \"ISODATA Classification\",\n    \"description\": \"This task clusters pixels in a dataset based on statistics only, without requiring you to define training classes.\",\n    \"parameters\": {\n        \"INPUT_RASTER\": {\n            \"name\": \"INPUT_RASTER\",\n            \"parameterType\": \"required\",\n            \"displayName\": \"Input Raster\",\n            \"description\": \"Specify a raster on which to perform unsupervised classification.\",\n            \"direction\": \"INPUT\",\n            \"dataType:\": \"ENVIRASTER\"\n        },\n        \"OUTPUT_RASTER\": {\n            \"name\": \"OUTPUT_RASTER\",\n            \"parameterType\": \"required\",\n            \"displayName\": \"Output Raster\",\n            \"description\": \"This is a reference to the output classification raster of filetype ENVI.\",\n            \"direction\": \"OUTPUT\",\n            \"dataType:\": \"ENVIRASTER\"\n        }\n    }\n}\n```\n\n##### Example of TaskInfo in v3\n```json\n{\n    \"taskName\": \"ISODATAClassification\",\n    \"serviceName\": \"ENVI\",\n    \"displayName\": \"ISODATA Classification\",\n    \"description\": \"This task clusters pixels in a dataset based on statistics only, without requiring you to define training classes.\",\n    \"inputParameters\": [\n        {\n            \"name\": \"INPUT_RASTER\",\n            \"type\": \"ENVIRASTER\",\n            \"required\": true,\n            \"displayName\": \"Input Raster\",\n            \"description\": \"Specify a raster on which to perform unsupervised classification.\"\n        }\n    ],\n    \"outputParameters\": [\n        {\n            \"name\": \"OUTPUT_RASTER\",\n            \"type\": \"ENVIRASTER\",\n            \"displayName\": \"Output Raster\",\n            \"description\": \"This is a reference to the output classification raster of filetype ENVI.\",\n            \"required\": true\n        }\n    ]\n}\n```\nFor full documention see [**TaskInfo**].\n\n\n### ServiceInfo\n- Removed 'tasks'.\n    - Use Service.tasks() or Service.taskInfoList() to obtain task lists.\n\n##### Example of ServiceInfo in v2\n```json\n{\n    \"name\": \"ENVI\",\n    \"description\": \"ENVI processing routines\",\n    \"tasks\": [\n        \"Task1\",\n        \"Task2\",\n        \"Task3\"\n    ]\n}\n```\n\n##### Example of ServiceInfo in v3\n```json\n{\n    \"name\": \"ENVI\",\n    \"description\": \"ENVI processing routines\"\n}\n```\nFor full documentation see [**ServiceInfo**].\n\n### SubmitOptions\n- Added 'jobOptions' object.\n    - 'route' was moved into the 'jobOptions' object.\n    - Any additional processing directives will reside in the 'jobOptions' object.\n- Renamed 'parameters' to 'inputParameters'.\n\n##### Example of SubmitOptions in v2\n```javascript\nconst submitOptions = {\n  parameters: {\n    INPUT_RASTER: {\n      FACTORY: 'URLRaster',\n      URL: '/some/url'\n    },\n    INDEX: 'Normalized Difference Vegetation Index'\n  },\n  route: \"ENVIRoute\"\n};\n```\n\n##### Example of SubmitOptions in v3\n```javascript\nconst submitOptions = {\n  inputParameters: {\n    INPUT_RASTER: {\n      FACTORY: 'URLRaster',\n      URL: '/some/url'\n    },\n    INDEX: 'Normalized Difference Vegetation Index'\n  },\n  jobOptions: {\n      route: \"ENVIRoute\"\n  }\n};\n```\nFor full documentation see [**SubmitOptions**].\n\n### JobInfo\n- Added 'jobStart'.\n- Added 'jobEnd'.\n- Added 'jobSubmitted'.\n- Added 'jobOptions'.\n- Renamed 'inputs' to 'inputParameters'.\n- Renamed 'jobErrorMessage' to 'jobError'.\n- Renamed 'results' to 'jobResults'.\n- Renamed 'jobProgressMessage' to 'jobMessage'.\n- Removed 'jobRoute'.  This property is now in the 'jobOptions' object.\n- Removed 'jobStatusUrl'.\n\n##### Example of JobInfo in v2\n```json\n{\n\t\"jobId\": 3410,\n\t\"jobStatus\": \"Succeeded\",\n\t\"jobStatusURL\": \"ese/jobs/3410/status\",\n\t\"jobProgress\": 100,\n\t\"jobProgressMessage\": \"Completed\",\n\t\"jobRoute\": \"default\",\n\t\"taskName\": \"SpectralIndex\",\n\t\"serviceName\": \"ENVI\",\n\t\"jobErrorMessage\": \"\",\n\t\"inputs\": {\n\t\t\"index\": \"Iron Oxide\",\n\t\t\"input_raster\": {\n\t\t\t\"url\": \"/some/url\",\n\t\t\t\"factory\": \"URLRaster\"\n\t\t}\n\t},\n\t\"results\": {\n        \"OUTPUT_RASTER\": {\n\t\t\t\"url\": \"/some/url\",\n\t\t\t\"factory\": \"URLRaster\",\n\t\t\t\"auxiliary_url\": [\n\t\t\t\t\"/some/url\"\n\t\t\t]\n        }\n\t},\n\t\"messages\": [{\n\t\t\t\"type\": \"esriJobMessageTypeInformative\",\n\t\t\t\"description\": \"Submission Time: Mon Jan 29 2018 16:07:52 GMT-0700 (Mountain Standard Time)\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"esriJobMessageTypeInformative\",\n\t\t\t\"description\": \"Start Time: Mon Jan 29 2018 16:07:52 GMT-0700 (Mountain Standard Time)\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"esriJobMessageTypeInformative\",\n\t\t\t\"description\": \"End Time: Mon Jan 29 2018 16:08:01 GMT-0700 (Mountain Standard Time) (Elapsed Time: 8.818 seconds)\"\n\t\t}\n\t]\n}\n```\n\n##### Example of JobInfo in v3\n```json\n{\n\t\"jobId\": 3410,\n\t\"jobProgress\": 100,\n\t\"jobMessage\": \"Completed\",\n\t\"jobStatus\": \"Succeeded\",\n\t\"taskName\": \"SpectralIndex\",\n\t\"serviceName\": \"ENVI\",\n\t\"inputParameters\": {\n\t\t\"index\": \"Iron Oxide\",\n\t\t\"input_raster\": {\n\t\t\t\"url\": \"/some/url\",\n\t\t\t\"factory\": \"URLRaster\"\n\t\t}\n\t},\n\t\"jobResults\": {\n\t\t\"OUTPUT_RASTER\": {\n\t\t\t\"best\": {\n\t\t\t\t\"url\": \"/some/url\",\n\t\t\t\t\"factory\": \"URLRaster\",\n\t\t\t\t\"auxiliary_url\": [\n\t\t\t\t\t\"/some/url\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"ese-job-parameter-mapper\": {\n\t\t\t\t\"url\": \"/some/url\",\n\t\t\t\t\"factory\": \"URLRaster\",\n\t\t\t\t\"auxiliary_url\": [\n\t\t\t\t\t\"/some/url\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"jobOptions\": {\n\t\t\"route\": \"default\"\n\t},\n\t\"jobSubmitted\": \"2018-01-29T23:07:52.992Z\",\n\t\"jobStart\": \"2018-01-29T23:07:52.995Z\",\n\t\"jobEnd\": \"2018-01-29T23:08:01.813Z\"\n}\n```\nFor full documentation see [**JobInfo**].\n\n### JobResults\n- Each parameter now contains all of the parameter mappings.  The highest ranked mapping is set to the 'best' key.\n\n##### Example of JobResults in v2\n```json\n{\n    \"OUTPUT_RASTER\": {\n        \"url\": \"/some/url\",\n        \"factory\": \"URLRaster\",\n        \"auxiliary_url\": [\n            \"/some/url\"\n        ]\n    }\n}\n```\n\n##### Example of JobResults in v3\n```json\n{\n    \"OUTPUT_RASTER\": {\n        \"best\": {\n            \"url\": \"/some/url\",\n            \"factory\": \"URLRaster\",\n            \"auxiliary_url\": [\n                \"/some/url\"\n            ]\n        },\n        \"ese-job-parameter-mapper\": {\n            \"url\": \"/some/url\",\n            \"factory\": \"URLRaster\",\n            \"auxiliary_url\": [\n                \"/some/url\"\n            ]\n        }\n    }\n}\n```\nFor full documentation see [**JobResults**].\n\n\n[**ServiceInfo**]:../typedef/index.html#static-typedef-ServiceInfo\n[**TaskInfo**]:../typedef/index.html#static-typedef-TaskInfo\n[**SubmitOptions**]:../typedef/index.html#static-typedef-SubmitOptions\n[**JobInfo**]:../typedef/index.html#static-typedef-JobInfo\n[**JobResults**]:../typedef/index.html#static-typedef-JobResults",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/doc/manual/tutorial/migration-guide-v4.md",
    "name": "./doc/manual/tutorial/migration-guide-v4.md",
    "content": "# Migration Guide: Moving from v3 to v4\nThe purpose of this guide is to help you transition your application's source code from v3 to v4 of the SDK.  These changes will allow you to use the SDK with GSF 3.0 or later.\n\n### Job IDs\nJob IDs are now strings due to the addition of optional unique job IDs in GSF 3.0.\n\n### Job Lists\n#### New 'query' option\nGSF 3.0 has added a powerful API for querying the job database.  The SDK now leverages this new query language and has removed some of the legacy job filters.  More information on this can be found in the [**Examples**] page or the GSF Job Search API Tutorial.\n\n#### New 'sort' option\nMore flexible sorting is now available for job lists.  Please see [**JobListOptions**] documentation for more details\n\n#### New 'totals' option\nA new option called 'totals' has been introduced to the JobListOptions object.  This can be used to retrieve total job counts by job status, as well as a grand total.  Please see the [**JobListOptions**] documentation for more details.\n\n#### JobInfoList response has changed\nInstead of just returning the array of JobInfo objects, the Client.JobInfoList() function now returns an object containing the count of filtered jobs, the total number of jobs in the database, and totals for each job status.  For more information see the [**JobInfoList**] documentation.\n\nJobInfoList V3\n```javascript\n[\n    <JobInfo>,\n    <JobInfo>,\n    ...\n]\n```\n\nJobInfoList V4\n```javascript\n{\n    total: 50,\n    count: 10,\n    jobs: [\n        <JobInfo>,\n        <JobInfo>,\n        ...\n    ]\n}\n```\n\n#### The 'reverse' and 'status' options have been removed\nThe 'reverse' and 'status' options have been removed from the [**JobListOptions**] object in favor of the new query API.  Below are examples for converting to the new syntax.\n\n##### Converting code that uses the 'reverse' option\nSetting the 'reverse' option to true is equivalent to sorting the job list by jobSubmitted date in descending order.\n\n```diff\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n});\n\n// Get job list with jobSubmitted date in descending order.\nconst jobListOptions = {\n-    reverse: true\n+    sort: [[ 'jobSubmitted', -1 ]]\n};\n\nclient\n    .jobs(jobListOptions)\n    .then((jobList) => {\n        console.log(jobList);\n    }).catch((err) => {\n        console.error(err);\n    });\n```\n\n##### Converting code that uses the 'status' option\nSetting the 'status' option is equivalent to querying by jobStatus using the new syntax.  For more examples on querying, please see the [**Examples**] or the GSF Job Search API Tutorial.\n\n```diff\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n});\n\n// Filter job list by Failed status.\nconst jobListOptions = {\n-    status: 'Failed'\n+    query: {\n+       jobStatus: {\n+           '$eq': 'Failed'\n+       }\n+    }\n};\n\nclient\n    .jobs(jobListOptions)\n    .then((jobList) => {\n        console.log(jobList);\n    }).catch((err) => {\n        console.error(err);\n    });\n```\n\n[**JobListOptions**]:../typedef/index.html#static-typedef-JobListOptions\n[**Examples**]:../manual/examples.html",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/doc/manual/tutorial/getting-started.md",
    "name": "./doc/manual/tutorial/getting-started.md",
    "content": "# Getting Started\n# GSF JavaScript Client SDK\n\n## About the SDK\nThe GSF JavaScript Client SDK provides a client-side JavaScript library for interacting with GSF.  The SDK works in both the browser and Node.js.\n\n1. This repository contains pre-built distributable files located in the `/dist/` directory.\n  - `/dist/GSF-node.js` - The Node.js bundle.\n  - `/dist/GSF-node.js.map` - The Node.js bundle source map.\n  - `/dist/GSF.js` - The non-minified web bundle.\n  - `/dist/GSF.js.map` - The non-minified web bundle source map file.\n  - `/dist/GSF.min.js` - The minified web bundle.\n  - `/dist/GSF.min.js.map` - The minified web bundle source map file.\n\n## Basic Usage\n### Importing the SDK\n#### Using ECMAScript 2015\n- Import everything with GSF namespace:\n\n  `import * as GSF from 'gsf-js-client-sdk';`\n\n- Import specific classes:\n\n  `import { Job, Task } from 'gsf-js-client-sdk';`\n\n#### Using Node.js\n- Require the SDK:\n\n  `const GSF = require('gsf-js-client-sdk/dist/GSF-node');`\n\n### Including the SDK with a Script Tag\n1. Include the GSF JavaScript Client SDK in your project.  The example below assumes the SDK file is located next to your html file.\n\n    `<script src=\"GSF.min.js\"></script>`\n\n2. Access the SDK using the global [**GSF**] object.\n\n    `<script>console.log(GSF);</script>`\n\n3. Below is a simple example of running a job and retrieving the results.  You will need to update the server address and port below to reflect the server that you are using.\n\n```javascript\nconst myAddress = 'MyServer';\nconst myPort = 9191;\n\n// GSF Client\nconst client = GSF.client({\n    address: myAddress,\n    port: myPort\n  });\n\n// Create a service object.\nconst service = client.service('ENVI');\n\n// Create a task object.\nconst task = service.task('SpectralIndex');\n\nconst NDVIParameters = {\n  inputParameters: {\n    INPUT_RASTER: {\n      FACTORY: 'URLRaster',\n      URL: `http://${myAddress}:${myPort}/ese/data/qb_boulder_msi`\n    },\n    INDEX: 'Normalized Difference Vegetation Index'\n  }\n};\n\n// Submit a job.\ntask.submitAndWait(NDVIParameters).then((results) => {\n    // Do something with results.\n    AddToMap(results.OUTPUT_RASTER.best);\n  }).catch((err) => {\n    // Display error.\n  });\n```\n\n## Requirements\n### Server Sent Events\nThe GSF JavaScript Client SDK relies on [server-sent events] for communication with the server.  Developers who wish to build apps that run on browsers lacking EventSource support will want to use a polyfill.  This is not necessary when using the SDK in Node.js.\n\nTo view a list of the browsers that support EventSource please go here: https://caniuse.com/#search=eventsource\n\nThere are several polyfills available that provide implementations of the EventSource API.  One such polyfill that is available from the npm and Bower package managers is called 'eventsource-polyfill'.  For information on installation and usage, see https://github.com/amvtek/EventSource.\n\n## Building the SDK\n1. Clone the repository.\n\n  $ git clone https://github.com/geospatial-services-framework/gsf-js-client-sdk\n\n2. From the root directory of the project install the dependencies.\n\n  $ npm install\n\n3. Run the build script.\n\n  $ npm run build\n\n## Testing the SDK\n#### Using a Test Server\nWe have provided a simple mock server implementation that can be used for very basic testing of the SDK.  There are several other test scripts available. See the scripts section of the package.json file for more information.\n\n##### Run tests in the browser against mock server.\n\n  $ npm run test\n\n##### Run tests in Node.js against mock server.\n\n  $ npm run test-node\n\n## Building the Documentation\n1. Build the documentation.\n\n  $ npm run help\n\n2. View the generated help files located in the `/help` directory (on Windows).\n\n  $ start help/index.html\n\n[**GSF**]:../class/src/GSF.js~GSF.html\n[server-sent events]:https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/doc/manual/tutorial/examples.md",
    "name": "./doc/manual/tutorial/examples.md",
    "content": "# Examples\nBelow are several examples of using the SDK with JavaScript.  For TypeScript specific examples see the [TypeScript example](#typescript).  Before using the SDK, it is also recommended that you read the [best practices](#bestPractices) section.\n\n## List Available Services\nThe GSF [**Client**] object provides the ability to list the available services on the server.\n\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\n// Get an array of available services.\nclient.services().then((services) => {\n  services.forEach((service) => {\n    // Print each service name.\n    console.log(service.name);\n  });\n}).catch((err) => {\n  // There was an error.\n});\n```\n\n## List Jobs\nThe GSF [**Client**] object provides the ability to query and sort the job list.\n\n### The 'query' option\nThe [**JobListOptions**] object supports an option called 'query'.  This can be used to form advanced queries of the job database.  The primary building block of a query is the comparison operator, which may be used to select jobs matching the desired criteria. The job search API supports the following comparison operators:\n- $eq\n- $gt\n- $gte\n- $lt\n- $lte\n- $ne\n\nA simple query for any job that is not 'Succeeded':\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\nconst jobListOptions = {\n  query: {\n\t  jobStatus: {\n\t\t  '$ne': 'Succeeded'\n  \t}\n  },\n};\n\n// List jobs.\nclient.jobInfoList(jobListOptions).then((jobInfoList) => {\n  // Print job list.\n  console.log(jobInfoList);\n}).catch((err) => {\n  // There was an error.\n});\n```\n### The 'sort' option\nIn addition to providing a query object, the [**JobListOptions**] also allows flexible sorting of the job list.  This field should be an array of sort arrays.  Multiple sort arrays may also be provided as the sorting will be evaluated from left to right.  Each field may be sorted in either ascending (1) or descending (-1) order.\n\nSort jobs by 'jobSubmitted' date in ascending order.\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\nconst jobListOptions = {\n  sort: [ [ 'jobSubmitted', 1 ] ]\n};\n\n// List jobs.\nclient.jobInfoList(jobListOptions).then((jobInfoList) => {\n  // Print job list.\n  console.log(jobInfoList);\n}).catch((err) => {\n  // There was an error.\n});\n```\n\n### Advanced query\nThis example shows all of the features of the job search API used together.  The job search below would return the 10 most recent failed Spectral Index jobs in the database.  For more information please see the [**JobListOptions**] object and the GSF Job Search API Tutorial.\n\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\nconst jobListOptions = {\n  query: {\n\t  taskName: {\n\t\t  '$eq': 'SpectralIndex'\n\t  },\n\t  jobStatus: {\n\t\t  '$eq': 'Failed'\n  \t}\n  },\n  sort: [ [ 'jobSubmitted', -1 ] ],\n  offset: 0,\n  limit: 10,\n  totals: 'all'\n};\n\n// List jobs.  This will result in an array of Job objects.\nclient.jobs(jobListOptions).then((jobList) => {\n  // Print job list.\n  console.log(jobList);\n}).catch((err) => {\n  // There was an error.\n});\n\n// List jobs.  This will result in a list of JobInfo object along with a count and totals.\nclient.jobInfoList(jobListOptions).then((jobInfoList) => {\n  // Print job list.\n  console.log(jobInfoList);\n}).catch((err) => {\n  // There was an error.\n});\n```\n\n## List Available Tasks\nThe [**Service**] object provides the ability to list the available tasks on the service.  The example below lists all tasks associated with the ENVI service.\n\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\n// Get the ENVI service.\nconst service = client.service('ENVI');\n\n// Get an array of available tasks.\nservice.tasks().then((tasks) => {\n  tasks.forEach((task) => {\n    // Print each task name.\n    console.log(task.name);\n  });\n}).catch((err) => {\n  // There was an error.\n});\n```\n\n## Get Task Information\nThe [**Task**] object allows you to query the task and its parameters.  This may be useful when dynamically constructing UI elements representing task input parameters.\n\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\n// Get the ENVI service.\nconst service = client.service('ENVI');\n\n// Get a task.\nconst task = service.task('SpectralIndex');\n\ntask.info().then((info) => {\n  // Print the task info.\n  console.log(info);\n}).catch((err) => {\n  // There was an error.\n});\n```\n\n## Run a Task\nThere are many ways to run tasks and retrieve results using the GSF JavaScript SDK.  The following examples assume you have completed the steps below to create a task object.\n\n```javascript\n// Get a task.\nconst task = GSF.client({address:'MyServer',port:'9191'}).service('ENVI').task('SpectralIndex');\n\nconst taskParameters = {\n  inputParameters: {\n    INPUT_RASTER: {\n      FACTORY: 'URLRaster',\n      URL: 'http://MyServer:9191/ese/data/qb_boulder_msi'\n    },\n    INDEX: 'Normalized Difference Vegetation Index'\n  }\n};\n```\n\n### Using Promises\nThe SDK provides a [**Promise**]-based interface for submitting tasks.  If the task succeeds, the promise will be fulfilled.  If the job fails, the promise will be rejected.  There are two ways to use promises for job submission.\n\n##### 1. Use [**.submit()**] and then [**.wait()**]\nThe [**Task**].[**submit()**] function returns a [**Promise**] to a [**Job**], and the [**Job**].[**wait()**] function returns a [**Promise**] to the JobResults.\n\n```javascript\n// Submit a job.\ntask.submit(taskParameters)\n  .then(job => job.wait())\n  .then((results) => {\n    // Do something with results.\n    // This function is an example and is not provided by the SDK.\n    AddToMap(results.OUTPUT_RASTER.best);\n  }).catch((jobErrorMessage) => {\n    // Display error.\n  });\n```\n\n##### 2. Use [**.submitAndWait()**]\nThis function simply combines the [**.submit()**] and [**.wait()**] functions.  This is perhaps the simplest way to submit a job and retrieve the results.  Use this if you are only intereseted in results and do not wish to interact with the [**Job**] object.\n\n```javascript\n// Submit a job.\ntask.submitAndWait(taskParameters).then((results) => {\n    // Do something with results.\n    // This function is an example and is not provided by the SDK.\n    AddToMap(results.OUTPUT_RASTER.best);\n  }).catch((jobErrorMessage) => {\n    // Display error.\n  });\n```\n## List and Retrieve Workspace Files\nThe GSF [**Job**] object provides the ability to fetch a list of workspace files.  It is required that the 'enableNodeInfo' configuration is set to true on the server for job workspace access.\n\nThe task below, CustomTask, is a fictional task that writes a text file to the job workspace.  This also provides an example of using async/await instead of promises.\n```javascript\nconst task = GSF.client({address:'MyServer',port:'9191'}).service('ENVI').task('CustomTask');\n\n// Submit job.\nconst job = await task.submit({});\n\n// Wait for job to complete.\nawait job.wait();\n\n// Get the list of workspace files.\nconst workspaceFiles = await job.workspace();\nconsole.log(workspaceFiles);\n// prints:\n// [\n//   {\n//     dev: 66311,\n//     mode: 33204,\n//     nlink: 1,\n//     uid: 1000,\n//     gid: 1000,\n//     rdev: 0,\n//     blksize: 4096,\n//     ino: 11768910,\n//     size: 18,\n//     blocks: 8,\n//     atimeMs: 1604352379848.0715,\n//     mtimeMs: 1604352379848.0715,\n//     ctimeMs: 1604352379848.0715,\n//     birthtimeMs: 1604352379848.0715,\n//     atime: \"2020-11-02T21:26:19.848Z\",\n//     mtime: \"2020-11-02T21:26:19.848Z\",\n//     ctime: \"2020-11-02T21:26:19.848Z\",\n//     birthtime: \"2020-11-02T21:26:19.848Z\",\n//     path: \"file.txt\"\n//   }\n// ]\n\n// Retrieve the contents of a text file.\nconst fileBuffer = await job.file(workspaceFiles[0].path);\nconst textDecoder = new TextDecoder('utf-8');\nconst fileContents = textDecoder.decode(fileBuffer);\nconsole.log(fileContents); // prints: Text file contents.\n```\n\n### Using Server Events\nThe [**Client**] and [**Job**] objects give you access to all job related events emitted by the server.  These classes inheret from Node's [**EventEmitter**] and support methods such as .on(), .once(), .removeAllListeners(), etc. The following example shows how to listen for job events on the [**Client**].\n\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\n// Set up an event listeners.\nclient.once('JobSucceeded', (data) => {\n  console.log('Job Succeeded: ', data.jobId);\n});\n\nclient.once('JobFailed', (data) => {\n  console.log('Job Failed: ', data.jobId);\n});\n\n// Create a service object.\nconst service = client.service('ENVI');\n\n// Create a task object.\nconst task = service.task('SpectralIndex');\n\nconst NDVIParameters = {\n  inputParameters: {\n    INPUT_RASTER: {\n      FACTORY: 'URLRaster',\n      URL: 'http://MyServer:9191/ese/data/qb_boulder_msi'\n    },\n    INDEX: 'Normalized Difference Vegetation Index'\n  }\n};\n\n// Submit a job.\ntask.submit(NDVIParameters);\n```\n\nFor a complete list of available events, see the [**Client**] class documentation.\n\n## Tracking Job Progress\nThere are two ways to track the progress of a job.\n\n### Progress Callbacks\nThe [**.submit()**] and [**.submitAndWait()**] functions support the inclusion of a progress callback for reporting job progress.\n\n```javascript\nconst progressCallback = function (data) {\n  console.log('Job progress percent: ', data.progress);\n  console.log('Job progress message: ', data.message);\n};\n\n// Submit a job.\ntask.submitAndWait(parameters, progressCallback).then((results) => {\n    // Do something with results.\n    // This function is an example and is not provided by the SDK.\n    AddToMap(results.OUTPUT_RASTER.best);\n  }).catch((jobErrorMessage) => {\n    // Display error.\n  });\n```\n\n### Progress Events\nJob progress events are emitted by the [**Client**] and [**Job**] objects.\n\n#### Client Progress Events\nIt is possible to listen to all job progress events emitted by the server using the [**Client**] object.\n\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\n// Set up an event listeners.\nclient.on('JobProgress', (data) => {\n  console.log('Job: ', data.jobId, ' progress percent: ', data.progress);\n  console.log('Job: ', data.jobId, ' progress message: ', data.message);\n});\n\n// Create a service object.\nconst service = client.service('ENVI');\n\n// Create a task object.\nconst task = service.task('SpectralIndex');\n\nconst NDVIParameters = {\n  inputParameters: {\n    INPUT_RASTER: {\n      FACTORY: 'URLRaster',\n      URL: 'http://MyServer:9191/ese/data/qb_boulder_msi'\n    },\n    INDEX: 'Normalized Difference Vegetation Index'\n  }\n};\n\n// Submit a job.\ntask.submit(NDVIParameters);\n```\n\n#### Job Progress Events\nA [**Job**] object emits progress events for the particular job which it represents.\n\n```javascript\n// GSF Client\nconst client = GSF.client({\n    address: 'MyServer',\n    port: '9191'\n  });\n\n// Create a service object.\nconst service = client.service('ENVI');\n\n// Create a task object.\nconst task = service.task('SpectralIndex');\n\nconst NDVIParameters = {\n  inputParameters: {\n    INPUT_RASTER: {\n      FACTORY: 'URLRaster',\n      URL: 'http://MyServer:9191/ese/data/qb_boulder_msi'\n    },\n    INDEX: 'Normalized Difference Vegetation Index'\n  }\n};\n\n// Submit a job.\ntask.submit(NDVIParameters).then((job) => {\n  // Set up an event listener on the job.\n  job.on('JobProgress', (data) => {\n    console.log('Job ', data.jobId, ' progress percent: ', data.progress);\n    console.log('Job ', data.jobId, ' progress message: ', data.message);\n  });\n}).catch((jobErrorMessage) => {\n  // Display error.\n});\n```\n\n## Cancelling Jobs\nBelow is an example of cancelling a job based on its job ID.\n\n```javascript\nconst myJobId = 1;\nconst job = new client.job(myJobId);\nconst force = false; // Do not force cancel.\n\n// Cancel Job\njob.cancel(force).then(() => {\n  console.log('Cancel has been successfully requested.');\n}).catch((err) => {\n  // Display error.\n});\n```\n\n## <a name=\"typescript\"></a> Typescript Example\nBelow is an example of submitting a job using typescript.\n\n```typescript\nimport * as GSF from 'gsf-js-client-sdk';\n\n// Get a task.\nconst clientOptions: GSF.ClientOptions = {address: 'MyServer', port: '9191'};\nconst myClient: GSF.Client = GSF.client(clientOptions);\nconst ENVIService: GSF.Service = myClient.service('ENVI');\nconst myTask: GSF.Task = ENVIService.task('SpectralIndex');\n\nconst taskParameters: GSF.SubmitOptions = {\n    inputParameters: {\n        INPUT_RASTER: {\n            FACTORY: 'URLRaster',\n            URL: 'http://MyServer:9191/ese/data/qb_boulder_msi'\n        },\n        INDEX: 'Normalized Difference Vegetation Index'\n    }\n};\n\n// Submit a job.\ntask.submitAndWait(taskParameters)\n    .then((results: GSF.JobResults) => {\n        // Do something with results.\n        // This function is an example and is not provided by the SDK.\n        AddToMap(results.OUTPUT_RASTER.best);\n    }).catch((jobErrorMessage) => {\n        // Display error.\n    });\n```\n\n## <a name=\"bestPractices\"></a> Best Practices\n### Connecting to Servers\nThe examples throughout this documentation explain various concepts within the SDK using complete examples.  Most of the examples create a new [**Client**] object for every example.  This is to ensure a fully functional and self-contained example but is not a good practice when developing web apps.  It is recommended that you limit the number of [**Client**] objects that you create.  Ideally, your app will create only one instance of this class and pass the reference around where needed.  This helps ensure consistency and prevent the possibility of exceeding the browser's per-domain connection limit.\n\n[**.wait()**]:../class/src/Job.js~Job.html#instance-method-wait\n[**wait()**]:../class/src/Job.js~Job.html#instance-method-wait\n[**.submitAndWait()**]:../class/src/Task.js~Task.html#instance-method-submitAndWait\n[**.submit()**]:../class/src/Task.js~Task.html#instance-method-submit\n[**submit()**]:../class/src/Task.js~Task.html#instance-method-submit\n\n[**Client**]:../class/src/Client.js~Client.html\n[**JobListOptions**]:../typedef/index.html#static-typedef-JobListOptions\n[**Service**]:../class/src/Service.js~Service.html\n[**Task**]:../class/src/Task.js~Task.html\n[**Job**]:../class/src/Job.js~Job.html\n\n[**EventEmitter**]:https://nodejs.org/api/events.html\n\n[**Promise**]:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/l3h/Development/gsf-js-client-sdk/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\n## 4.2.0 / 2021-10-26\n\n### New Features\n- Support for GSF 3.0:\n    - Add job delete functionality, matching job deletion functionality in GSF.\n\n## 4.0.0 / 2020-06-22\n\n### New Features\n- Support for GSF 3.0:\n    - Add 'query' option to JobListOptions for more advanced querying of the job database.\n    - Add 'sort' option to the JobListOptions for flexible sorting of the job list.\n    - Add 'totals' option to JobListOptions for totals broken down by job status.\n\n### Breaking Changes\n- Changes related to GSF 3.0:\n    - Change jobId type from number to string to support the new 'uniqueJobIds' configuration option in GSF.\n    - Remove 'reverse' and 'status' options from JobListOptions in favor or more powerful 'sort' and 'query' options.\n    - The JobInfoList is now an object containing the jobs array, job count, and totals.\n\nFor a detailed summary of the changes, see the V4 Migration Guide and examples in the documentation.\n\n## 3.0.0 / 2018-03-21\n\n### New Features\n- Updated the SDK to use the new GSF HTTP API.\n\n### Breaking Changes\n- Several breaking changes were made for this release.  For a detailed summary of the changes, see the Migration Guide in the documentation.\n\n## 2.2.0 / 2018-03-22\n\n### New Features\n- Added Server.jobInfoList() for fetching an array of the current JobInfo objects.\n\n### Bug Fixes\n- Fix #10 - Server.jobInfoList() will retrieve full JobInfo objects from the server.\n\n## 2.1.0 / 2018-03-21\n\n### New Features\n- Added headers object to the ServerArgs object to allow custom headers to be used in requests.\n\n## 2.0.0 / 2017-07-24\n\n### New Features\n- Added the ability to use the SDK in Node.js.  See documentation for more details.\n\n### Breaking Changes\n- Task class: Replaced 'server' and 'serviceName' constructor arguments with 'service'.  This only affects Task objects created using the Task class constructor; there is no change to Task objects created using the Service.Task() method.  See API documentation for more details.\n\n## 1.0.0 / 2017-02-26\n\n### New Features\n- Add a change log.\n",
    "static": true,
    "access": "public"
  }
]